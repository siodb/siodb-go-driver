// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ColumnDataType.proto

package siodb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//* Column data types.
type ColumnDataType int32

const (
	ColumnDataType_COLUMN_DATA_TYPE_BOOL   ColumnDataType = 0
	ColumnDataType_COLUMN_DATA_TYPE_INT8   ColumnDataType = 1
	ColumnDataType_COLUMN_DATA_TYPE_UINT8  ColumnDataType = 2
	ColumnDataType_COLUMN_DATA_TYPE_INT16  ColumnDataType = 3
	ColumnDataType_COLUMN_DATA_TYPE_UINT16 ColumnDataType = 4
	ColumnDataType_COLUMN_DATA_TYPE_INT32  ColumnDataType = 5
	ColumnDataType_COLUMN_DATA_TYPE_UINT32 ColumnDataType = 6
	ColumnDataType_COLUMN_DATA_TYPE_INT64  ColumnDataType = 7
	ColumnDataType_COLUMN_DATA_TYPE_UINT64 ColumnDataType = 8
	ColumnDataType_COLUMN_DATA_TYPE_FLOAT  ColumnDataType = 9
	ColumnDataType_COLUMN_DATA_TYPE_DOUBLE ColumnDataType = 10
	/// 64-bit IEEE-754 floating-point number
	ColumnDataType_COLUMN_DATA_TYPE_TEXT  ColumnDataType = 11
	ColumnDataType_COLUMN_DATA_TYPE_NTEXT ColumnDataType = 12
	/// Textual data with altertnative encoding
	ColumnDataType_COLUMN_DATA_TYPE_BINARY       ColumnDataType = 13
	ColumnDataType_COLUMN_DATA_TYPE_DATE         ColumnDataType = 14
	ColumnDataType_COLUMN_DATA_TYPE_TIME         ColumnDataType = 15
	ColumnDataType_COLUMN_DATA_TYPE_TIME_WITH_TZ ColumnDataType = 16
	/// Time with time zone
	ColumnDataType_COLUMN_DATA_TYPE_TIMESTAMP         ColumnDataType = 17
	ColumnDataType_COLUMN_DATA_TYPE_TIMESTAMP_WITH_TZ ColumnDataType = 18
	/// Date and time with time zone
	ColumnDataType_COLUMN_DATA_TYPE_DATE_INTERVAL ColumnDataType = 19
	ColumnDataType_COLUMN_DATA_TYPE_TIME_INTERVAL ColumnDataType = 20
	ColumnDataType_COLUMN_DATA_TYPE_STRUCT        ColumnDataType = 21
	ColumnDataType_COLUMN_DATA_TYPE_XML           ColumnDataType = 22
	ColumnDataType_COLUMN_DATA_TYPE_JSON          ColumnDataType = 23
	ColumnDataType_COLUMN_DATA_TYPE_UUID          ColumnDataType = 24
	ColumnDataType_COLUMN_DATA_TYPE_MAX           ColumnDataType = 25
	ColumnDataType_COLUMN_DATA_TYPE_UNKNOWN       ColumnDataType = 127
)

var ColumnDataType_name = map[int32]string{
	0:   "COLUMN_DATA_TYPE_BOOL",
	1:   "COLUMN_DATA_TYPE_INT8",
	2:   "COLUMN_DATA_TYPE_UINT8",
	3:   "COLUMN_DATA_TYPE_INT16",
	4:   "COLUMN_DATA_TYPE_UINT16",
	5:   "COLUMN_DATA_TYPE_INT32",
	6:   "COLUMN_DATA_TYPE_UINT32",
	7:   "COLUMN_DATA_TYPE_INT64",
	8:   "COLUMN_DATA_TYPE_UINT64",
	9:   "COLUMN_DATA_TYPE_FLOAT",
	10:  "COLUMN_DATA_TYPE_DOUBLE",
	11:  "COLUMN_DATA_TYPE_TEXT",
	12:  "COLUMN_DATA_TYPE_NTEXT",
	13:  "COLUMN_DATA_TYPE_BINARY",
	14:  "COLUMN_DATA_TYPE_DATE",
	15:  "COLUMN_DATA_TYPE_TIME",
	16:  "COLUMN_DATA_TYPE_TIME_WITH_TZ",
	17:  "COLUMN_DATA_TYPE_TIMESTAMP",
	18:  "COLUMN_DATA_TYPE_TIMESTAMP_WITH_TZ",
	19:  "COLUMN_DATA_TYPE_DATE_INTERVAL",
	20:  "COLUMN_DATA_TYPE_TIME_INTERVAL",
	21:  "COLUMN_DATA_TYPE_STRUCT",
	22:  "COLUMN_DATA_TYPE_XML",
	23:  "COLUMN_DATA_TYPE_JSON",
	24:  "COLUMN_DATA_TYPE_UUID",
	25:  "COLUMN_DATA_TYPE_MAX",
	127: "COLUMN_DATA_TYPE_UNKNOWN",
}

var ColumnDataType_value = map[string]int32{
	"COLUMN_DATA_TYPE_BOOL":              0,
	"COLUMN_DATA_TYPE_INT8":              1,
	"COLUMN_DATA_TYPE_UINT8":             2,
	"COLUMN_DATA_TYPE_INT16":             3,
	"COLUMN_DATA_TYPE_UINT16":            4,
	"COLUMN_DATA_TYPE_INT32":             5,
	"COLUMN_DATA_TYPE_UINT32":            6,
	"COLUMN_DATA_TYPE_INT64":             7,
	"COLUMN_DATA_TYPE_UINT64":            8,
	"COLUMN_DATA_TYPE_FLOAT":             9,
	"COLUMN_DATA_TYPE_DOUBLE":            10,
	"COLUMN_DATA_TYPE_TEXT":              11,
	"COLUMN_DATA_TYPE_NTEXT":             12,
	"COLUMN_DATA_TYPE_BINARY":            13,
	"COLUMN_DATA_TYPE_DATE":              14,
	"COLUMN_DATA_TYPE_TIME":              15,
	"COLUMN_DATA_TYPE_TIME_WITH_TZ":      16,
	"COLUMN_DATA_TYPE_TIMESTAMP":         17,
	"COLUMN_DATA_TYPE_TIMESTAMP_WITH_TZ": 18,
	"COLUMN_DATA_TYPE_DATE_INTERVAL":     19,
	"COLUMN_DATA_TYPE_TIME_INTERVAL":     20,
	"COLUMN_DATA_TYPE_STRUCT":            21,
	"COLUMN_DATA_TYPE_XML":               22,
	"COLUMN_DATA_TYPE_JSON":              23,
	"COLUMN_DATA_TYPE_UUID":              24,
	"COLUMN_DATA_TYPE_MAX":               25,
	"COLUMN_DATA_TYPE_UNKNOWN":           127,
}

func (x ColumnDataType) String() string {
	return proto.EnumName(ColumnDataType_name, int32(x))
}

func (ColumnDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_156162b4236ec7fa, []int{0}
}

func init() {
	proto.RegisterEnum("siodb.ColumnDataType", ColumnDataType_name, ColumnDataType_value)
}

func init() { proto.RegisterFile("ColumnDataType.proto", fileDescriptor_156162b4236ec7fa) }

var fileDescriptor_156162b4236ec7fa = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xcd, 0x4e, 0xc2, 0x40,
	0x14, 0x85, 0x05, 0x05, 0x75, 0x54, 0x3c, 0x8e, 0xfc, 0xab, 0x24, 0xb2, 0x70, 0xe1, 0xc2, 0x84,
	0x9f, 0x34, 0x6e, 0xa7, 0xb4, 0x86, 0x6a, 0x3b, 0x43, 0xe0, 0x56, 0xc0, 0x4d, 0x03, 0xd1, 0x85,
	0x89, 0x5a, 0xa2, 0xb8, 0x70, 0xe5, 0xeb, 0xf8, 0x98, 0xc6, 0x2e, 0x48, 0x0c, 0xb7, 0xeb, 0xef,
	0x7c, 0x67, 0x6e, 0x4e, 0x32, 0xa2, 0xd8, 0x8b, 0x5f, 0x3e, 0x5f, 0xdf, 0x9c, 0xd9, 0x72, 0x46,
	0x5f, 0x8b, 0xa7, 0xab, 0xc5, 0x7b, 0xbc, 0x8c, 0x65, 0xee, 0xe3, 0x39, 0x7e, 0x9c, 0x5f, 0xfe,
	0xe4, 0x45, 0xe1, 0x3f, 0x97, 0x35, 0x51, 0xea, 0x19, 0x3f, 0x0c, 0x74, 0xe4, 0x28, 0x52, 0x11,
	0x4d, 0x07, 0x6e, 0x64, 0x1b, 0xe3, 0x63, 0x83, 0x45, 0x9e, 0xa6, 0x6b, 0x64, 0x64, 0x5d, 0x94,
	0xd7, 0x50, 0x98, 0xb0, 0x2c, 0xcb, 0x3c, 0x4d, 0x2d, 0x0b, 0x9b, 0xf2, 0x44, 0x54, 0x58, 0xaf,
	0x65, 0x61, 0x2b, 0x4d, 0xec, 0xb4, 0x91, 0x4b, 0x15, 0x3b, 0x6d, 0xe4, 0xd3, 0x44, 0xab, 0x8b,
	0xed, 0x54, 0xd1, 0xea, 0x62, 0x87, 0x15, 0x6f, 0x7c, 0xa3, 0x08, 0xbb, 0xac, 0xe8, 0x98, 0xd0,
	0xf6, 0x5d, 0x08, 0x76, 0x1a, 0x72, 0x27, 0x84, 0x3d, 0xb6, 0x53, 0x27, 0x6c, 0x9f, 0xed, 0xb4,
	0x3d, 0xad, 0x86, 0x53, 0x1c, 0xb0, 0x9d, 0x8e, 0x22, 0x17, 0x05, 0xfe, 0x39, 0x2f, 0x70, 0x71,
	0x28, 0xcf, 0xc5, 0x19, 0x8b, 0xa2, 0xb1, 0x47, 0xfd, 0x88, 0x1e, 0x00, 0xd9, 0x10, 0x75, 0x36,
	0x32, 0x22, 0x15, 0x0c, 0x70, 0x24, 0x2f, 0x44, 0x33, 0x9d, 0xaf, 0x7a, 0xa4, 0x6c, 0x8a, 0x06,
	0x7b, 0xe0, 0xdf, 0xd6, 0xee, 0xf0, 0x5e, 0xf9, 0x38, 0x66, 0x33, 0xc9, 0x39, 0xab, 0x4c, 0x91,
	0x5d, 0x61, 0x44, 0xc3, 0xb0, 0x47, 0x28, 0xc9, 0xaa, 0x28, 0xae, 0xc1, 0x49, 0xe0, 0xa3, 0xcc,
	0x8e, 0x70, 0x3b, 0x32, 0x1a, 0x15, 0x16, 0x85, 0xa1, 0xe7, 0xa0, 0xca, 0xf6, 0x05, 0x6a, 0x82,
	0x9a, 0x3c, 0x15, 0xd5, 0x75, 0x49, 0xdf, 0x69, 0x33, 0xd6, 0xf8, 0xb6, 0xb3, 0xfd, 0xcc, 0x3c,
	0x9f, 0x7c, 0x9e, 0xce, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0x58, 0x10, 0x88, 0x54, 0x03,
	0x00, 0x00,
}
